" PREPARATIONS {{{
scriptencoding utf-8

augroup gvimrc
  autocmd!
augroup END
" }}}

" ENVIRONMENTS {{{
if has('win32')
  set guifont=Hack_Nerd_Font_Mono:h11,Consolas:h11
  set guifontwide=MS_Gothic:h11

  if exists('&renderoptions')
    set renderoptions=type:directx
  endif
elseif has('gui_gtk')
  set guifont=Hack\ Nerd\ Font\ Mono\ 11,Monospace\ 11
elseif has('osx')
  set guifont=Hack\ Nerd\ Font\ Mono:h14,Menlo:h14
  set guifontwide=YuGo-Medium:h14
  set linespace=1
endif
" }}}

" UTILS {{{
function! IncreaseFontSize(inc) " {{{
  let size = str2nr(matchstr(&guifont, '\d\+'))
  let &guifont = substitute(&guifont, size, size + a:inc, 'g')
  let &guifontwide = substitute(&guifontwide, size, size + a:inc, 'g')
endfunction " }}}

" :ToggleFullscreen {{{
function! s:Fullscreen()
  if ! s:IsFullscreen()
    if exists('&fullscreen')
      set fullscreen
    elseif has('win32')
      simalt ~x
    endif
  endif
endfunction

function! s:QuitFullscreen()
  if s:IsFullscreen()
    if exists('&fullscreen')
      set nofullscreen
    elseif has('win32')
      simalt ~r
    endif
  endif
endfunction

function! s:IsFullscreen()
  if exists('&fullscreen')
    return &fullscreen
  elseif has('win32')
    return getwinposy() < 0
  endif

  return 0
endfunction

command! -nargs=0 ToggleFullscreen if s:IsFullscreen() | call s:QuitFullscreen() | else | call s:Fullscreen() | endif

nnoremap <M-CR> :ToggleFullscreen<CR>
" }}}

" s:LoadWindowState() / s:SaveWindowState() {{{
let s:winstat_file = expand(g:user_vim_dir . '/winstat')

function! s:SaveWindowState()
  if ! s:IsFullscreen()
    call writefile([getwinposx(), getwinposy(), &columns, &lines], s:winstat_file)
  endif
endfunction

function! s:LoadWindowState()
  if filereadable(s:winstat_file)
    let lines = readfile(s:winstat_file, '', 4)

    execute 'winpos ' . get(lines, 0) . ' ' . get(lines, 1)

    let &columns = get(lines, 2, 80)
    let &lines = get(lines, 3, 20)
  endif
endfunction

augroup gvimrc
  autocmd GUIEnter * call s:LoadWindowState()
  autocmd VimLeavePre * call s:SaveWindowState()
augroup END
" }}}

" s:ChangeBackground() {{{
if exists('##OSAppearanceChanged')
  function! s:ChangeBackground()
    if (v:os_appearance)
      set background=dark
    else
      set background=light
    endif

    if exists(':AirlineRefresh')
      AirlineRefresh
    endif

    redraw!
  endfunction

  augroup gvimrc
    autocmd OSAppearanceChanged * call s:ChangeBackground()
  augroup END
endif
" }}}
" }}}
