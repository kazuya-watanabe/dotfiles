" PREPARATIONS {{{
scriptencoding utf-8

augroup vimrc
  autocmd!
augroup end

syntax enable

filetype plugin indent on

"let g:loaded_2html_plugin = 1
let g:loaded_getscriptPlugin = 1
"let g:loaded_gzip = 1
let g:loaded_logiPat = 1
"let g:loaded_matchparen = 1
let g:loaded_netrwPlugin = 1
let g:loaded_rrhelper = 1
let g:loaded_spellfile_plugin = 1
let g:loaded_tarPlugin = 1
let g:loaded_vimballPlugin = 1
let g:loaded_zipPlugin = 1
" }}}

" ENVIRONMENTS {{{
let g:user_vim_dir = '~/.vim'

if has('win32')
  let g:user_vim_dir = '~/vimfiles'

  set ambiwidth=double
  set completeslash=slash
  set fileformats=unix,dos
  set makeencoding=char

  if has('vcon')
    set termguicolors
  endif
elseif has('osx')
  set macmeta
endif
" }}}

" UI {{{
set belloff=all
set cmdheight=2
set display=lastline
set fileignorecase
set fillchars& | set fillchars+=vert:\ 
set foldlevelstart=2
set foldmethod=marker
set langmenu=none
set laststatus=2
set langmenu=none
set lazyredraw
set list
set listchars=tab:>-,trail:-,extends:>,precedes:<
set nolangremap
set number
set ruler
set scrolloff=5
set shortmess& | set shortmess+=acI
set showbreak=>\ 
set showcmd
set showmatch
set sidescrolloff=5
set splitbelow
set splitright
set statusline=%<%f\ %m%r%=%{'['.(&fileencoding!=''?&fileencoding:&encoding).']['.&fileformat.']'}%y\ %p\ %l:%v
set ttimeout
set ttimeoutlen=100
set virtualedit=block
set whichwrap& | set whichwrap+=<,>,~,[,]
set wildignorecase
set wildmenu
set wildmode=longest:full,full

if version >= 900
  set wildoptions=fuzzy,pum,tagfile
else
  set wildoptions=tagfile
endif

if has('gui_running')
  set guioptions& | set guioptions+=chk | set guioptions-=T | set guioptions-=e | set guioptions-=m
endif
" }}}

" EDITING {{{
set autoindent
set autoread
set backspace=indent,eol,start
set clipboard& | set clipboard+=unnamed
set completeopt=menuone,longest,preview
set expandtab
set formatoptions& | set formatoptions+=jmM | set formatoptions-=c | set formatoptions-=t
set history=10000
set nrformats& | set nrformats-=octal
set shiftwidth=2
set smartindent
set smarttab
set softtabstop=-1
set undofile

let &directory = expand(g:user_vim_dir . '/swap')
let &undodir = expand(g:user_vim_dir . '/undo')
let &viewdir = expand(g:user_vim_dir . '/view')
let &viminfofile = expand(g:user_vim_dir . '/viminfo')

call mkdir(&directory, 'p')
call mkdir(&undodir, 'p')
call mkdir(&viewdir, 'p')
" }}}

" SEARCH AND DIFF {{{
set hlsearch
set ignorecase
set incsearch
set smartcase

if version >= 900
  set diffopt& | set diffopt+=vertical,algorithm:histogram
else
  set diffopt& | set diffopt+=vertical
endif

if executable('rg')
  set grepformat& | set grepformat+=%f:%l:%c:%m
  set grepprg=rg\ --vimgrep\ --hidden
endif
" }}}

" PRINTING {{{
set printheader=%{expand(\"%:t:r\")}%=%N

if has('win32')
  set printfont=:h8
elseif has('osx')
  set printencoding=utf-8
  set printfont=:h8
  set printmbcharset=UniJIS2004
  set printmbfont=r:YuGo-Medium,b:YuGo-Bold,c:yes,a:yes

  let &printexpr = 'system("open -a Preview " . shellescape(fname_in))'
endif
" }}}

" FILETYPES {{{
augroup vimrc
  autocmd BufNewFile *.ahk,*.bat,*.cmd,*.ps1,*.reg,*.vb,*.vbs setlocal fileformat=dos fileencoding=cp932

  if has('win32')
    autocmd BufNewFile *.ahk,*.bat,*.cmd,*.ps1,*.reg,*.vb,*.vbs setlocal completeslash=backslash
  endif

  autocmd BufNewFile,BufRead gitconfig,.gitconfig,*/git/config,*/.git/config setlocal tabstop=4 noexpandtab
augroup end
" }}}

" KEY MAPPINGS {{{
let g:mapleader = ','
let g:maplocalleader = ' '

noremap <F1> <Esc>
noremap! <F1> <Esc>

noremap j gj
noremap k gk
noremap n nzz
noremap N Nzz

cnoremap <C-a> <Home>
cnoremap <C-b> <Left>
cnoremap <C-d> <Del>
cnoremap <C-e> <End>
cnoremap <C-f> <Right>
cnoremap <C-n> <Down>
cnoremap <C-p> <Up>

inoremap <C-a> <Home>
inoremap <C-b> <Left>
inoremap <C-d> <Del>
inoremap <C-e> <End>
inoremap <C-f> <Right>
inoremap <C-n> <Down>
inoremap <C-p> <Up>

nnoremap <silent> <Esc><Esc> :<C-u>nohlsearch<CR>
nnoremap <silent> <S-Tab> :<C-u>tabprevious<CR>
nnoremap <silent> <Tab> :<C-u>tabnext<CR>
nnoremap Y y$

nnoremap <silent> <M-1> :<C-u>1tabnext<CR>
nnoremap <silent> <M-2> :<C-u>2tabnext<CR>
nnoremap <silent> <M-3> :<C-u>3tabnext<CR>
nnoremap <silent> <M-4> :<C-u>4tabnext<CR>
nnoremap <silent> <M-5> :<C-u>5tabnext<CR>
nnoremap <silent> <M-6> :<C-u>6tabnext<CR>
nnoremap <silent> <M-7> :<C-u>7tabnext<CR>
nnoremap <silent> <M-8> :<C-u>8tabnext<CR>
nnoremap <silent> <M-9> :<C-u>9tabnext<CR>
nnoremap <silent> <M-0> :<C-u>$tabnext<CR>

nnoremap <M-b> <C-b>
nnoremap <M-d> <C-d>
nnoremap <M-f> <C-f>
nnoremap <M-h> <C-w>h
nnoremap <M-j> <C-w>j
nnoremap <M-k> <C-w>k
nnoremap <M-l> <C-w>l
nnoremap <M-u> <C-u>

augroup vimrc
  autocmd FileType fugitive,help,qf nnoremap <silent> <buffer> q :<C-u>quit<CR>
augroup end
" }}}

" UTILS {{{
" :Cd {{{
function! s:ChangeDirectory(path)
  if exists('*FugitiveIsGitDir') && FugitiveIsGitDir('.')
    if empty(a:path)
      execute 'Glcd'
    else
      execute 'Glcd ' . a:path
    endif
  else
    if empty(a:path)
      execute 'lcd %:p:h'
    else
      execute 'lcd ' . a:path
    endif
  endif
endfunction

command! -nargs=? -complete=dir Cd call s:ChangeDirectory(<q-args>)
" }}}

" :LookupMacDict {{{
if has('osx') && executable('open')
  function! s:LookupMacDict(word)
    return system('open ' . shellescape('dict://' . a:word))
  endfunction

  command! -nargs=1 LookupMacDict call s:LookupMacDict(<q-args>)

  nnoremap <silent> <Leader>d :<C-u>LookupMacDict <cword><CR>
  vnoremap <silent> <Leader>d "vy:LookupMacDict <C-r>v<CR>
endif
" }}}

" :PrintPDF {{{
if executable('wkhtmltopdf')
  function! s:PrintPDF(path, line1, line2, bang)
    let tmpfile = tempname() . '.html'
    let pdffile = empty(a:path) ? (expand('%') . '.pdf') : a:path
    let args = get(g:, 'pdf_wkhtmltopdf_options', '--no-background --footer-font-size 6 --footer-right "[page] / [topage]"')

    if ! empty(glob(expand(pdffile)))
      if empty(a:bang)
        echoerr 'File exists (add ! to override)'
        return 0
      else
        call delete(expand(pdffile))
      endif
    endif

    execute a:line1 . ',' . a:line2 . 'TOhtml'
    execute 'write ' . expand(tmpfile)
    execute 'bdelete!'
    call system('wkhtmltopdf ' . args . ' ' . shellescape(expand(tmpfile)) . ' ' . shellescape(expand(pdffile)))
    call delete(expand(tmpfile))

    return 1
  endfunction

  " g:pdf_wkhtmltopdf_options = '--no-background --footer-font-size 7 --footer-right "[page] / [topage]"'
  command! -nargs=? -complete=file -range=% -bang PrintPDF call s:PrintPDF(<q-args>, <line1>, <line2>, <q-bang>)
endif
" }}}

" :Tig {{{
if executable('tig')
  command! -nargs=* Tig terminal ++close tig <f-args>
endif
" }}}

function! s:DownloadFile(url, savepath) " {{{
  call mkdir(fnamemodify(a:savepath, ':p:h'), 'p')

  if executable('curl')
    call system('curl -fLo ' . shellescape(a:savepath) . ' ' . shellescape(a:url))
  elseif executable('wget')
    call system('wget -O ' . shellescape(a:savepath) . ' ' . shellescape(a:url))
  elseif executable('bitsadmin')
    call system('bitsadmin /transfer vimrc ' . shellescape(a:url) . ' ' . shellescape(a:savepath))
  else
    return 0
  endif

  return filereadable(a:savepath)
endfunction " }}}
" }}}

" EXTERNAL PLUGINS {{{
function! s:LazyLoadPlug(timer)
  " Install vim-plug automatically {{{
  let s:vimplug = expand(g:user_vim_dir . '/autoload/plug.vim')

  if ! executable('git')
    echomsg 'git is required for vim-plug. vim-plug are not loaded.'
    return
  endif

  if ! filereadable(s:vimplug)
    echomsg 'Download and install the plugin manager vim-plug.'

    if ! s:DownloadFile('https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim', s:vimplug)
      echoerr 'Download failed. vim-plug are not loaded.'
      return
    endif

    echomsg 'Installation is completed.'
  endif
  " }}}

  " Settings before loading plugins. {{{
  " vim-airline
  let g:airline_extensions = [ 'branch', 'coc', 'ctrlp', 'quickfix', 'tabline', 'term', 'undotree', 'vista', 'whitespace', 'wordcount' ]

  " vim-polyglot
  let g:polyglot_disabled = [ 'ftdetect', 'autoindent', 'sensible' ]
  " }}}

  " Initialize vim-plug and list the plugins to be used. {{{
  call plug#begin(g:user_vim_dir . '/plugged')

  if executable('node') && version > 801
    Plug 'neoclide/coc.nvim', {'branch': 'release'}
    Plug 'honza/vim-snippets'
  endif

  Plug 'airblade/vim-gitgutter'
  Plug 'ctrlpvim/ctrlp.vim' | Plug 'mattn/ctrlp-matchfuzzy'
  Plug 'easymotion/vim-easymotion'
  Plug 'editorconfig/editorconfig-vim'
  Plug 'godlygeek/tabular'
  Plug 'jeetsukumaran/vim-buffergator'
  Plug 'liuchengxu/vista.vim'
  Plug 'mbbill/undotree'
  Plug 'preservim/nerdcommenter'
  Plug 'rafi/awesome-vim-colorschemes'
  Plug 'sheerun/vim-polyglot'
  Plug 'tpope/vim-dadbod' | Plug 'kristijanhusak/vim-dadbod-ui'
  Plug 'tpope/vim-fugitive'
  Plug 'tpope/vim-repeat'
  Plug 'tpope/vim-speeddating'
  Plug 'tpope/vim-surround'
  Plug 'vim-jp/vimdoc-ja'
  Plug 'vim-scripts/matchit.zip'

  if has('python3')
    Plug 'vim-vdebug/vdebug'
  endif

  if executable('trans')
    Plug 'echuraev/translate-shell.vim'
  endif

  if has('python3') && executable('node')
    Plug 'puremourning/vimspector'
  endif

  if &encoding == 'utf-8'
    Plug 'ryanoasis/vim-devicons'
  endif

  Plug 'vim-airline/vim-airline' | Plug 'vim-airline/vim-airline-themes'
  Plug 'preservim/nerdtree' | Plug 'Xuyuanp/nerdtree-git-plugin' | Plug 'tiagofumo/vim-nerdtree-syntax-highlight'

  call plug#end()
  " }}}

  function! s:IsPlugged(plug) " {{{
    return has_key(g:plugs, a:plug) && has_key(g:plugs[a:plug], 'dir') && ! empty(glob(g:plugs[a:plug]['dir'] . '/*'))
  endfunction " }}}

  " Download and install missing plugins. {{{
  for i in keys(g:plugs)
    if ! s:IsPlugged(i)
      echomsg 'Download and install missing plugins. After installation you must restart vim. Otherwise some plugins will not work properly.'

      silent PlugInstall --sync

      echohl WarningMsg
        echomsg 'Installation is completed. Please restart the vim.'
      echohl None

      return
    endif
  endfor
  " }}}

  if s:IsPlugged('coc.nvim') " {{{
    let g:coc_global_extensions = [
          \ 'coc-highlight',
          \ 'coc-json', 'coc-toml', 'coc-xml', 'coc-yaml',
          \ 'coc-html', 'coc-css',
          \ 'coc-svg',
          \ 'coc-tsserver', 'coc-eslint', 'coc-prettier',
          \ 'coc-sql',
          \ 'coc-vimlsp',
          \ 'coc-webview', 'coc-markdown-preview-enhanced'
          \ ]

    if has('python3')
      call add(g:coc_global_extensions, 'coc-snippets')
    endif

    " tools
    if executable('cmake')
      call add(g:coc_global_extensions, 'coc-cmake')
    endif

    if executable('docker')
      call add(g:coc_global_extensions, 'coc-docker')
    endif

    if executable('swagger-codegen')
      call add(g:coc_global_extensions, 'coc-swagger')
    endif

    " frameworks
    if executable('ember')
      call add(g:coc_global_extensions, 'coc-ember')
    endif

    if executable('ng')
      call add(g:coc_global_extensions, 'coc-angular')
    endif

    if executable('vue')
      call add(g:coc_global_extensions, 'coc-vetur')
    endif

    " languages
    if executable('R')
      call add(g:coc_global_extensions, 'coc-r-lsp')
    endif

    if executable('bash') && ! has('win32')
      call add(g:coc_global_extensions, 'coc-sh')
    endif

    if executable('rustc')
      call extend(g:coc_global_extensions, ['coc-rls','coc-rust-analyzer'])
    endif

    if executable('clangd')
      call add(g:coc_global_extensions, 'coc-clangd')
    endif

    if executable('dmd') || executable('gdc')
      call add(g:coc_global_extensions, 'coc-dlang')
    endif

    if executable('dotnet')
      call add(g:coc_global_extensions, 'coc-omnisharp')
    endif

    if executable('go')
      call add(g:coc_global_extensions, 'coc-go')
    endif

    if executable('javac')
      call add(g:coc_global_extensions, 'coc-java')
    endif

    if executable('lua') || executable('luajit')
      call add(g:coc_global_extensions, 'coc-lua')
    endif

    if executable('perl')
      call add(g:coc_global_extensions, 'coc-perl')
    endif

    if executable('php')
      call extend(g:coc_global_extensions, ['coc-phpls', 'coc-blade', 'coc-php-cs-fixer'])
    endif

    if executable('powershell') || executable('posh')
      call add(g:coc_global_extensions,  'coc-powershell')
    endif

    if executable('python3')
      call extend(g:coc_global_extensions, ['coc-pyright', 'coc-pydocstring', 'coc-htmldjango'])
    endif

    if executable('ruby')
      call add(g:coc_global_extensions, 'coc-solargraph')
    endif

    if executable('swift')
      call add(g:coc_global_extensions, 'coc-sourcekit')
    endif

    " May need for Vim (not Neovim) since coc.nvim calculates byte offset by count
    " utf-8 byte sequence
    set encoding=utf-8
    " Some servers have issues with backup files, see #649
    set nobackup
    set nowritebackup

    " Having longer updatetime (default is 4000 ms = 4s) leads to noticeable
    " delays and poor user experience
    set updatetime=300

    " Always show the signcolumn, otherwise it would shift the text each time
    " diagnostics appear/become resolved
    set signcolumn=yes

    " Use tab for trigger completion with characters ahead and navigate
    " NOTE: There's always complete item selected by default, you may want to enable
    " no select by `"suggest.noselect": true` in your configuration file
    " NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
    " other plugin before putting this into your config
    inoremap <silent><expr> <TAB>
          \ coc#pum#visible() ? coc#pum#next(1) :
          \ CheckBackspace() ? "\<Tab>" :
          \ coc#refresh()
    inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"

    " Make <CR> to accept selected completion item or notify coc.nvim to format
    " <C-g>u breaks current undo, please make your own choice
    inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
          \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

    function! CheckBackspace() abort
      let col = col('.') - 1
      return !col || getline('.')[col - 1]  =~# '\s'
    endfunction

    " Use <c-space> to trigger completion
    if has('nvim')
      inoremap <silent><expr> <c-space> coc#refresh()
    else
      inoremap <silent><expr> <c-@> coc#refresh()
    endif

    " Use `[g` and `]g` to navigate diagnostics
    " Use `:CocDiagnostics` to get all diagnostics of current buffer in location list
    nmap <silent> [g <Plug>(coc-diagnostic-prev)
    nmap <silent> ]g <Plug>(coc-diagnostic-next)

    " GoTo code navigation
    nmap <silent> gd <Plug>(coc-definition)
    nmap <silent> gy <Plug>(coc-type-definition)
    nmap <silent> gi <Plug>(coc-implementation)
    nmap <silent> gr <Plug>(coc-references)

    " Use K to show documentation in preview window
    nnoremap <silent> K :call ShowDocumentation()<CR>

    function! ShowDocumentation()
      if CocAction('hasProvider', 'hover')
        call CocActionAsync('doHover')
      else
        call feedkeys('K', 'in')
      endif
    endfunction

    " Highlight the symbol and its references when holding the cursor
    autocmd CursorHold * silent call CocActionAsync('highlight')

    " Symbol renaming
    nmap <leader>rn <Plug>(coc-rename)

    " Formatting selected code
    xmap <leader>f  <Plug>(coc-format-selected)
    nmap <leader>f  <Plug>(coc-format-selected)

    augroup mygroup
      autocmd!
      " Setup formatexpr specified filetype(s)
      autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
      " Update signature help on jump placeholder
      autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
    augroup end

    " Applying code actions to the selected code block
    " Example: `<leader>aap` for current paragraph
    xmap <leader>a  <Plug>(coc-codeaction-selected)
    nmap <leader>a  <Plug>(coc-codeaction-selected)

    " Remap keys for applying code actions at the cursor position
    nmap <leader>ac  <Plug>(coc-codeaction-cursor)
    " Remap keys for apply code actions affect whole buffer
    nmap <leader>as  <Plug>(coc-codeaction-source)
    " Apply the most preferred quickfix action to fix diagnostic on the current line
    nmap <leader>qf  <Plug>(coc-fix-current)

    " Remap keys for applying refactor code actions
    nmap <silent> <leader>re <Plug>(coc-codeaction-refactor)
    xmap <silent> <leader>r  <Plug>(coc-codeaction-refactor-selected)
    nmap <silent> <leader>r  <Plug>(coc-codeaction-refactor-selected)

    " Run the Code Lens action on the current line
    nmap <leader>cl  <Plug>(coc-codelens-action)

    " Map function and class text objects
    " NOTE: Requires 'textDocument.documentSymbol' support from the language server
    xmap if <Plug>(coc-funcobj-i)
    omap if <Plug>(coc-funcobj-i)
    xmap af <Plug>(coc-funcobj-a)
    omap af <Plug>(coc-funcobj-a)
    xmap ic <Plug>(coc-classobj-i)
    omap ic <Plug>(coc-classobj-i)
    xmap ac <Plug>(coc-classobj-a)
    omap ac <Plug>(coc-classobj-a)

    " Remap <C-f> and <C-b> to scroll float windows/popups
    if has('nvim-0.4.0') || has('patch-8.2.0750')
      nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
      nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
      inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
      inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
      vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
      vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
    endif

    " Use CTRL-S for selections ranges
    " Requires 'textDocument/selectionRange' support of language server
    nmap <silent> <C-s> <Plug>(coc-range-select)
    xmap <silent> <C-s> <Plug>(coc-range-select)

    " Add `:Format` command to format current buffer
    command! -nargs=0 Format :call CocActionAsync('format')

    " Add `:Fold` command to fold current buffer
    command! -nargs=? Fold :call     CocAction('fold', <f-args>)

    " Add `:OR` command for organize imports of the current buffer
    command! -nargs=0 OR   :call     CocActionAsync('runCommand', 'editor.action.organizeImport')

    " Add (Neo)Vim's native statusline support
    " NOTE: Please see `:h coc-status` for integrations with external plugins that
    " provide custom statusline: lightline.vim, vim-airline
    set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

    " Mappings for CoCList
    " Show all diagnostics
    nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>
    " Manage extensions
    nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>
    " Show commands
    nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>
    " Find symbol of current document
    nnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>
    " Search workspace symbols
    nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>
    " Do default action for next item
    nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
    " Do default action for previous item
    nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>
    " Resume latest coc list
    nnoremap <silent><nowait> <space>p  :<C-u>CocListResume<CR>

    command! -nargs=0 MarkdownPreview CocCommand markdown-preview-enhanced.openPreview

    inoremap <silent><expr> <C-j> coc#pum#visible() ? coc#pum#next(1) : "\<C-j>"
    inoremap <silent><expr> <C-k> coc#pum#visible() ? coc#pum#prev(1) : "\<C-k>"
    inoremap <silent><expr> <C-n> coc#pum#visible() ? coc#pum#next(1) : "\<Down>"
    inoremap <silent><expr> <C-p> coc#pum#visible() ? coc#pum#prev(1) : "\<Up>"

    if g:coc_service_initialized == 0
      CocStart
    endif
  endif " }}}

  if s:IsPlugged('awesome-vim-colorschemes') " {{{
    if has('gui_running')
      set background=light
    else
      set background=dark
    endif

    colorscheme PaperColor

    highlight! link CocFloatDividingLine CocFloating
    highlight! link CocMenuSel PmenuSel
    highlight! link VertSplit StatusLine
    highlight! link Terminal Normal
  endif
  " }}}

  if s:IsPlugged('vim-devicons') " {{{
    if has('win32')
      set ambiwidth=single
    endif

    set listchars=tab:›-,trail:∙,extends:»,precedes:«

    if has('linebreak')
      set showbreak=↪\ \ 
    endif

    let g:webdevicons_enable = 1
    let g:webdevicons_enable_nerdtree = 1
    let g:webdevicons_conceal_nerdtree_brackets = 1
    let g:webdevicons_enable_airline_tabline = 1
    let g:webdevicons_enable_airline_statusline = 1

    let g:NERDTreeGitStatusIndicatorMapCustom = {
          \ 'Modified'  :'󰧟',
          \ 'Staged'    :'󰐕',
          \ 'Untracked' :'󰓎',
          \ 'Renamed'   :'󰁔',
          \ 'Unmerged'  :'󰦎',
          \ 'Deleted'   :'󰆴',
          \ 'Dirty'     :'󰂚',
          \ 'Ignored'   :'󰅖',
          \ 'Clean'     :'󰄬',
          \ 'Unknown'   :'?',
          \ }
    let g:NERDTreeGitStatusUseNerdFonts = 1

    if ! exists('g:airline_symbols')
      let g:airline_symbols = {}
    endif

    let g:airline_powerline_fonts = 1
    let g:airline_left_sep = ''
    let g:airline_left_alt_sep = ''
    let g:airline_right_sep = ''
    let g:airline_right_alt_sep = ''
    let g:airline_symbols.branch = '󰘬'
    let g:airline_symbols.colnr = ''
    let g:airline_symbols.dirty = '󰐗'
    let g:airline_symbols.linenr = ''
    let g:airline_symbols.maxlinenr = ' '
    let g:airline_symbols.notexists = '󰱼'
    let g:airline_symbols.paste = '󰆒'
    let g:airline_symbols.readonly = '󰌾'
    let g:airline_symbols.spell = '󰓆'
    let g:airline_symbols.whitespace = '󱁐'
    let g:airline#extensions#coc#error_symbol = '󰀩 '
    let g:airline#extensions#coc#warning_symbol = '󰀦 '
    let g:airline#extensions#tabline#close_symbol = '󰅖'
    let g:airline#extensions#tabline#overflow_marker = '…'
    let g:airline#extensions#tabline#tabs_label = '󰓩'

    let g:vista_icon_indent = ['└ ', '├ ']
    let g:vista_fold_toggle_icons = ['', '']
    let g:vista#renderer#icons = {
          \ 'func': '󰊕',
          \ 'function': '󰊕',
          \ 'functions': '󰊕',
          \ 'var': '',
          \ 'variable': '',
          \ 'variables': '',
          \ 'const': '',
          \ 'constant': '',
          \ 'constructor': '󰑶',
          \ 'method': '',
          \ 'package': '',
          \ 'packages': '',
          \ 'enum': '',
          \ 'enummember': '',
          \ 'enumerator': '',
          \ 'module': '',
          \ 'modules': '',
          \ 'type': '',
          \ 'typedef': '',
          \ 'types': '',
          \ 'field': '',
          \ 'fields': '',
          \ 'macro': '󰎤',
          \ 'macros': '󰎤',
          \ 'map': '󰙅',
          \ 'class': '',
          \ 'augroup': '󰙅',
          \ 'struct': '',
          \ 'union': '󰕤',
          \ 'member': '',
          \ 'target': '󰎔',
          \ 'property': '',
          \ 'interface': '',
          \ 'namespace': '',
          \ 'subroutine': '󰒰',
          \ 'implementation': '',
          \ 'typeParameter': '',
          \ 'default': ''
          \ }

    try
      call coc#config('suggest.completionItemKindLabels', {
            \ 'keyword': '',
            \ 'variable': g:vista#renderer#icons.variable,
            \ 'value': '󰎠',
            \ 'operator': 'ψ',
            \ 'constructor': g:vista#renderer#icons.constructor,
            \ 'function': g:vista#renderer#icons.function,
            \ 'reference': '',
            \ 'constant': g:vista#renderer#icons.constant,
            \ 'method': g:vista#renderer#icons.method,
            \ 'struct': g:vista#renderer#icons.struct,
            \ 'class': g:vista#renderer#icons.class,
            \ 'interface': g:vista#renderer#icons.interface,
            \ 'text': '',
            \ 'enum': g:vista#renderer#icons.enum,
            \ 'enumMember': g:vista#renderer#icons.enummember,
            \ 'module': g:vista#renderer#icons.module,
            \ 'color': '',
            \ 'property': g:vista#renderer#icons.property,
            \ 'field': g:vista#renderer#icons.field,
            \ 'unit': '',
            \ 'event': '󰥕',
            \ 'file': '󰈤',
            \ 'folder': '󰉖',
            \ 'snippet': '󰅩',
            \ 'typeParameter': g:vista#renderer#icons.typeParameter,
            \ 'default': g:vista#renderer#icons.default
            \ })
    catch
    endtry
  endif " }}}

  if s:IsPlugged('ctrlp.vim') " {{{
    let g:ctrlp_map = '<C-p>'
    let g:ctrlp_match_func = {'match': 'ctrlp_matchfuzzy#matcher'}

    if executable('fd')
      let g:ctrlp_user_command = 'fd --hidden --type f --color never "" "%s" .'
    endif

    nnoremap <silent> <M-p><M-b> :<C-u>CtrlPBuffer<CR>
    nnoremap <silent> <M-p><M-f> :<C-u>CtrlPCurFile<CR>
    nnoremap <silent> <M-p><M-m> :<C-u>CtrlPMRUFiles<CR>
    nnoremap <silent> <M-p><M-q> :<C-u>CtrlPQuickfix<CR>
  endif " }}}

  if s:IsPlugged('nerdtree') " {{{
    let g:NERDTreeBookmarksFile = expand(g:user_vim_dir . '/NERDTreeBookmarksFile')
    let g:NERDTreeWinSize = 30

    function! s:NERDTreeToggleVCS()
      try
        BuffergatorClose
      catch
      endtry

      NERDTreeToggleVCS
    endfunction

    nnoremap <silent> <Leader>e :<C-u>call <SID>NERDTreeToggleVCS()<CR>
  endif " }}}

  if s:IsPlugged('translate-shell.vim') " {{{
    let g:trans_default_direction = ':ja'
    let g:trans_advanced_options = '-brief'
    let g:trans_join_lines = 1

    nnoremap <silent> <LocalLeader>t :<C-u>Trans<CR>
    vnoremap <silent> <LocalLeader>t :<C-u>Trans<CR>
  endif " }}}

  if s:IsPlugged('undotree') " {{{
    let g:undotree_SetFocusWhenToggle = 1
    let g:undotree_SplitWidth = 30
    let g:undotree_WindowLayout = 3

    function s:UndotreeToggle()
      try
        Vista!
      catch
      endtry

      UndotreeToggle
    endfunction

    nnoremap <silent> <Leader>u :<C-u>call <SID>UndotreeToggle()<CR>
  endif " }}}

  if s:IsPlugged('vim-airline') " {{{
    let g:airline_experimental = 1
    let g:airline#extensions#tabline#fnamemod = ':t'
    let g:airline#extensions#tabline#show_buffers = 0
    let g:airline#extensions#tabline#show_close_button = 0

    call airline#update_statusline()
  endif " }}}

  if s:IsPlugged('vim-buffergator') " {{{
    let g:buffergator_autodismiss_on_select = 0
    let g:buffergator_autoexpand_on_split = 0
    let g:buffergator_autoupdate = 1
    let g:buffergator_suppress_keymaps = 1
    let g:buffergator_vsplit_size = 30

    function s:BuffergatorToggle()
      try
        NERDTreeClose
      endtry

      BuffergatorToggle
    endfunction

    nnoremap <silent> <Leader>b :<C-u>call <SID>BuffergatorToggle()<CR>
  endif " }}}

  if s:IsPlugged('vim-speeddating') " {{{
    SpeedDatingFormat %Y/%m/%d
  endif " }}}

  if s:IsPlugged('vimspector') " {{{
    let g:vimspector_install_gadgets = []

    if executable('mono')
      call add(g:vimspector_install_gadgets, 'vscode-cpptools')
    endif

    if executable('llvm')
      call add(g:vimspector_install_gadgets, 'CodeLLDB')
    endif

    if executable('python3')
      call add(g:vimspector_install_gadgets, 'debugpy')
    endif

    if executable('go')
      call add(g:vimspector_install_gadgets, 'delve')
    endif

    if executable('tclsh')
      call add(g:vimspector_install_gadgets, 'tclpro')
    endif

    if executable('bash')
      call add(g:vimspector_install_gadgets, 'vscode-bash-debug')
    endif

    if executable('lua') || executable('luajit')
      call add(g:vimspector_install_gadgets, 'local-lua-debugger-vscode')
    endif

    if str2nr(substitute(split(system('node --version'), '\.')[0], 'v', '', '')) >= 18
      call add(g:vimspector_install_gadgets, 'vscode-js-debug')
    endif

    if executable('javac')
      call add(g:vimspector_install_gadgets, 'vscode-java-debug')
    endif

    if executable('php')
      call add(g:vimspector_install_gadgets, 'vscode-php-debug')
    endif

    if executable('dotnet')
      call add(g:vimspector_install_gadgets, 'netcoredbg')
    endif

    let g:vimspector_base_dir = expand(g:user_vim_dir . '/vimspector')
    let g:vimspector_enable_mappings = 'HUMAN'

    nnoremap <F2> :<C-u>VimspectorReset<CR>
  endif " }}}

  if s:IsPlugged('vista.vim') " {{{
    let g:vista_sidebar_width = 30

    if s:IsPlugged('coc.nvim')
      let g:vista_default_executive = 'coc'
    elseif executable('ctags')
      let g:vista_default_executive = 'ctags'
    endif

    function s:Vista()
      try
        UndotreeHide
      catch
      endtry

      Vista!!
    endfunction

    nnoremap <silent> <Leader>t :<C-u>call <SID>Vista()<CR>
  endif " }}}
endfunction

augroup vimrc
  autocmd VimEnter * call timer_start(1, function('s:LazyLoadPlug'))
augroup end
" }}}
